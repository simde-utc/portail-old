<?php

/**
 * AssoMemberTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class AssoMemberTable extends Doctrine_Table
{

  /**
   * Recharge les permissions de l'utilisateur courant aprÃ¨s une modification de la table
   * 
   * @param sfEvent $event 
   */
  public function postSave($event)
  {
    parent::postSave($event);
    $this->getUser()->reloadGroupsAndPermissions();
  }

  /**
   * Returns an instance of this class.
   *
   * @return object AssoMemberTable
   */
  public static function getInstance()
  {
    return Doctrine_Core::getTable('AssoMember');
  }

  public function getPresident($asso)
  {
    $q = $this->getMembres($asso)
            ->andWhere('r.id = 1');
    return $q;
  }

  public function getBureau($asso)
  {
    $q = $this->getMembres($asso)
            ->andWhere('r.bureau = 1')
            ->orderBy('r.id');

    return $q;
  }

  public function getMembres($asso, $bureau = true)
  {
    $q = $this->createQuery('q')
            ->where('q.asso_id = ?', $asso->getId())
            ->andWhere('q.semestre_id = ?', sfConfig::get('app_portail_current_semestre'))
            ->leftJoin('q.Role r')
            ->leftJoin('q.User u')
            ->leftJoin('u.Profile p')
            ->leftJoin('q.Semestre s')
            ->orderBy('u.username');
    if(!$bureau)
      $q->andWhere('r.Bureau = 0');

    return $q;
  }

  public function getAssoMember($asso, $user)
  {
    $q = $this->createQuery('q')
            ->where('q.asso_id = ?', $asso)
            ->andWhere('q.user_id = ?', $user);
    return $q;
  }

  public function getCurrentAssoMember($asso, $user)
  {
    $q = $this->getAssoMember($asso, $user)
            ->andWhere('q.semestre_id = ?', sfConfig::get('app_portail_current_semestre'));
    return $q;
  }

  public function wasPresident($asso,$user)
  {
    $q = $this->getAssoMember($asso, $user)
              ->andWhere('q.semestre_id = ?', sfConfig::get('app_portail_current_semestre') - 1);
    $r = $q->fetchOne();
    return ($r && $r->getRoleId() == 1);
  }

  public function isPresident($asso, $user)
  {
    $q = $this->getCurrentAssoMember($asso, $user);
    $r = $q->fetchOne();
    return ($r && $r->getRoleId() == 1);
  }

  public function getDroits($user_id)
  {
    $q = $this->createQuery('q')
            ->select('q.*, a.id, a.login, r.id, r.droits')
            ->where('q.user_id = ?', $user_id)
            ->andWhere('q.semestre_id = ?', sfConfig::get('app_portail_current_semestre'))
            ->leftJoin('q.Asso a')
            ->leftJoin('q.Role r');
    return $q;
  }

}