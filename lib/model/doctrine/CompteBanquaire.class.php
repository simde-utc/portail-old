<?php

/**
 * CompteBanquaire
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    simde
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class CompteBanquaire extends BaseCompteBanquaire
{
    private $soldes = array();

    public function __toString() {
        return $this->getNom();
    }

    /* Cette fonction est pas terrible
     * malheuresement doctrine ne supporte pas les constructions
     * FROM (SELECT ...) donc on ne peut pas grouper les requêtes en une seule
     */
    public function retrieveSoldes()
    {
        // filtre de base pour les transactions
        $q = TransactionTable::getInstance()->createQuery('t');
        $q->select('SUM(t.montant) as total')
            ->where('t.compte_id = ?', $this->getPrimaryKey())
            ->andWhere('t.note_de_frais_id IS NULL AND t.deleted_at IS NULL')
            ->groupBy('t.compte_id');
        $qmax = clone $q;
        $qmin = clone $q;

        // transactions rapprochées
        $q->andWhere('t.date_rapprochement IS NOT NULL');
        $res = $q->execute();
        if (count($res) == 0)
            $rapproche = $this->soldes['rapproche'] = 0;
        else
            $rapproche = $this->soldes['rapproche'] = $res[0]['total'];

        // total des dépenses non rapprochées
        $qmin->andWhere('t.date_rapprochement IS NULL AND t.montant < 0');
        $res = $qmin->execute();
        if (count($res) == 0)
            $minimum = 0;
        else
            $minimum = $res[0]['total'];

        // total des recettes non rapprochées
        $qmax->andWhere('t.date_rapprochement IS NULL AND t.montant > 0');
        $res = $qmax->execute();
        if (count($res) == 0)
            $maximum = 0;
        else
            $maximum = $res[0]['total'];

        $this->soldes['actuel'] = $rapproche + $minimum + $maximum;
        $this->soldes['minimum'] = $rapproche + $minimum;
        $this->soldes['maximum'] = $rapproche + $maximum;
    }

    public function getSoldeActuel()
    {
        if (!count($this->soldes))
            $this->retrieveSoldes();
        return $this->soldes['actuel'];
    }

    public function getSoldeRapproche()
    {
        if (!count($this->soldes))
            $this->retrieveSoldes();
        return $this->soldes['rapproche'];
    }

    public function getSoldeProjeteMinimum()
    {
        if (!count($this->soldes))
            $this->retrieveSoldes();
        return $this->soldes['minimum'];
    }

    public function getSoldeProjeteMaximum()
    {
        if (!count($this->soldes))
            $this->retrieveSoldes();
        return $this->soldes['maximum'];
    }
}